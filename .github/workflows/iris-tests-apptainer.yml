name: Iris Tests

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.ref }}
  cancel-in-progress: ${{ github.ref != 'refs/heads/main' }}

jobs:
  build-container-image:
    runs-on: [self-hosted, mi3008x]
    timeout-minutes: 90

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Apptainer (if not available)
        run: |
          if ! command -v apptainer &> /dev/null && ! command -v docker &> /dev/null; then
            echo "Neither Apptainer nor Docker found, installing Apptainer..."
            apt-get update && apt-get install -y software-properties-common
            add-apt-repository -y ppa:apptainer/ppa
            apt-get update && apt-get install -y apptainer
          else
            echo "Container runtime already available"
          fi

      - name: Build Iris container
        run: |
          # Use the universal container build script
          bash .github/scripts/container_build.sh
  test-1-2-4-ranks:
    name: Test 1/2/4 Ranks (Parallel)
    needs: build-container-image
    runs-on: [self-hosted, mi3008x]
    timeout-minutes: 20

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Cleanup lingering ports before tests
        run: |
          bash .github/scripts/cleanup_ports.sh

      - name: Run 1, 2, 4 rank tests in parallel
        run: |
          set -e

          # Run tests in parallel with different GPU assignments
          # Note: Each test gets 2+ GPUs even if it only uses some of them.
          # This allows tests like test_empty_device_handling to verify that
          # allocating on a different device correctly raises an error.

          echo "::group::Starting parallel tests"
          echo "Starting 1-rank test on GPUs 0,1..."
          bash .github/scripts/run_tests.sh 1 "0,1" &
          PID1=$!

          echo "Starting 2-rank test on GPUs 2,3..."
          bash .github/scripts/run_tests.sh 2 "2,3" &
          PID2=$!

          echo "Starting 4-rank test on GPUs 4,5,6,7..."
          bash .github/scripts/run_tests.sh 4 "4,5,6,7" &
          PID4=$!
          echo "::endgroup::"

          # Wait for all parallel tests and track failures
          echo "::group::Waiting for parallel tests to complete"
          FAIL=0
          FAILED_TESTS=""

          wait $PID1 || { echo "::error::1-rank test FAILED"; FAILED_TESTS="$FAILED_TESTS 1-rank"; FAIL=1; }
          wait $PID2 || { echo "::error::2-rank test FAILED"; FAILED_TESTS="$FAILED_TESTS 2-rank"; FAIL=1; }
          wait $PID4 || { echo "::error::4-rank test FAILED"; FAILED_TESTS="$FAILED_TESTS 4-rank"; FAIL=1; }
          echo "::endgroup::"

          if [ $FAIL -eq 1 ]; then
            echo "::error::Parallel tests failed:$FAILED_TESTS"
            exit 1
          fi

          echo "✅ All parallel tests (1, 2, 4 ranks) passed!"

  test-8-ranks:
    name: Test 8 Ranks
    needs: build-container-image
    runs-on: [self-hosted, mi3008x]
    timeout-minutes: 15

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Cleanup lingering ports before tests
        run: |
          bash .github/scripts/cleanup_ports.sh

      - name: Run 8-rank test
        run: |
          set -e

          echo "::group::Running 8-rank test on all GPUs"
          bash .github/scripts/run_tests.sh 8 "0,1,2,3,4,5,6,7"
          echo "::endgroup::"

          echo "✅ 8-rank test passed!"
